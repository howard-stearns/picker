.red img    { background-color: red; }
.green img  { background-color: green; }
.blue img   { background-color: blue; }
.purple img { background-color: purple; }
.box.missing { display: none; } /* "Works" in that following cells fill in, BUT, then calculated "left" is wrong! */
.box {
    height: 200px;
    width: 200px;
    opacity: 1; /* Here and elsewhere, the explicit 1 is a failed attempt to get transition FROM 1 to animated on ios. */
    /* Firefox is the only browser that can animate grid-template-columns.
       So instead, script will compute where the selected left edge has to be
       relative to where it starts when not selected. */
    position: relative;
    left: 0; /* auto does not animate well, so be explicit. */
    transition: height 1s, width 1s, left 1s, opacity 1s;
    /* This and the repeats below are the same failed attempt mentioned above. */
    -webkit-transition: height 1s, width 1s, left 1s, opacity 1s;
}
.box img {
    border-radius: 50%;
    height: 100%;
    width: 100%;
    pointer-events: none;
}
.box span {
    line-height: 0.70;
    position: absolute;
    left: 0;
    bottom: 0;
    margin: 0;
}
.selected {
    height: 400px;
    width: 400px;
    opacity: 1;    
}
/* There's no "all siblings" selector in css yet, so add .hasSelected
   to parent when we add .selected to one child. This then catches all
   the other children. */
.hasSelected > :not(.selected) {
    opacity: 0;
    height: 0;
    width: 0;
    transition: height 1s, width 1s, left 1s, opacity 1s;    
    -webkit-transition: height 1s, width 1s, left 1s, opacity 1s;
}
.picker {
    /* Children with float: left do not animate smoothly when their
       changing size allows their row to change. So lock them into
       columns. */
    display: grid;
    grid-template-columns: 200px 200px 200px;
    width: 600px;
    margin: auto;
}
